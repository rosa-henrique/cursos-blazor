@page "/produtos/novo"

@using Microsoft.EntityFrameworkCore
@using BlazorApp.Components.Produtos

@inject IDbContextFactory<BlazorApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Novo Produto</PageTitle>

<h1>Novo Produto</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Produto" OnValidSubmit="AddProduto" FormName="create" Enhance>

            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="mb-3">
                <label for="nome" class="form-label">Nome:</label>
                <InputText id="nome" @bind-Value="Produto.Nome" class="form-control" />
                <ValidationMessage For="() => Produto.Nome" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="descricao" class="form-label">Descrição:</label>
                <InputText id="descricao" @bind-Value="Produto.Descricao" class="form-control" />
                <ValidationMessage For="() => Produto.Descricao" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">
                    Categoria:
                    <InputSelect class="form-select" @bind-Value="Produto!.Categoria">
                        <option value="">Selecione uma categoria...</option>
                        @foreach (var categoria in Categorias)
                        {
                            <option value="@categoria">@categoria</option>
                        }
                    </InputSelect>
                </label>
            </div>

            <div class="mb-3">
                <label for="preco" class="form-label">Preço:</label>
                <InputNumber id="preco" @bind-Value="Produto.Preco" class="form-control" />
                <ValidationMessage For="() => Produto.Preco" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="disponivelestoque" class="form-label">Disponível?:</label>
                <InputCheckbox id="disponivelestoque" @bind-Value="Produto.DisponivelEstoque" class="form-check-input" />
                <ValidationMessage For="() => Produto.DisponivelEstoque" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="datavalidade" class="form-label">Data de Validade:</label>
                <InputDate id="datavalidade" @bind-Value="Produto.DataValidade" class="form-control" />
                <ValidationMessage For="() => Produto.DataValidade" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Salvar</button>&nbsp;
            <a class="btn btn-warning" href="/produtos">Voltar</a>
        </EditForm>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    public Produto Produto { get; set; }

    private readonly List<string> Categorias = new() { "Eletrônicos", "Vestuário", "Alimentos" };

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddProduto()
    {
        using var context = DbFactory.CreateDbContext();
        context.Produto.Add(Produto);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/produtos");
    }

    protected override void OnInitialized()
    {
        Produto ??= new()
            {
                DataValidade = DateTime.UtcNow
            };
    }
}
